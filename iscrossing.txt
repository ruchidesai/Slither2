(defun is-crossing (i j e)
  (cond ((equal e 'T) (cond ((equal j 0) (cond ((equal i 0) (cond ((and (member (list i (1+ j) 'T) final-moves :test #'equal)
                                                                        (member (list i (1+ j) 'L) final-moves :test #'equal) ) t )
																  (t nil) ))
											   (t (cond ((or (and (member (list i (1+ j) 'T) final-moves :test #'equal)
											                      (member (list i (1+ j) 'L) final-moves :test #'equal) )
															 (and (member (list (1- i) (1+ j) 'L) final-moves :test #'equal)
															      (member (list i (1+ j) 'T) final-moves :test #'equal) )
															 (and (member (list (1- i) j 'L) final-moves :test #'equal)
															      (member (list i j 'L) final-moves :test #'equal) )
															 (and (member (list (1- i) (1+ j) 'L) final-moves :test #'equal)
															      (member (list i (1+ j) 'L) final-moves :test #'equal) ) ) t )
														(t nil) )) ))
                            ((equal j (1- num-of-cols)) (cond ((equal i 0) (cond ((and (member (list i (1- j) 'T) final-moves :test #'equal)
                                                                                       (member (list i (1- j) 'L) final-moves :test #'equal) ) t )
                                                                                 (t nil) ))
															  (t (cond ((or (and (member (list i (1- j) 'T) final-moves :test #'equal)
															                     (member (list i j 'L) final-moves :test #'equal) )
																			(and (member (list (1- i) j 'L) final-moves :test #'equal)
																			     (member (list i (1- j) 'T) final-moves :test #'equal) )
																			(and (member (list (1- i) j 'R) final-moves :test #'equal)
																			     (member (list i j 'R) final-moves :test #'equal) )
                                                                            (and (member (list (1- i) j 'L) final-moves :test #'equal)
                                                                                 (member (list i j 'L) final-moves :test #'equal) ) ) t )
																	   (t nil) )) ))
                            (t (cond ((equal i 0) (cond ((or (and (member (list i (1- j) 'T) final-moves :test #'equal)
                                                                  (member (list i j 'L) final-moves :test #'equal) )
                                                             (and (member (list i (1+ j) 'T) final-moves :test #'equal)
                                                                  (member (list i (1+ j) 'L) final-moves :test #'equal) ) ) t )
														(t nil) ))
									 (t (cond ((or (and (member (list (1- i) j 'L) final-moves :test #'equal)
									                    (member (list i (1- j) 'T) final-moves :test #'equal) )
												   (and (member (list (1- i) (1+ j) 'L) final-moves :test #'equal)
												        (member (list i (1+ j) 'T) final-moves :test #'equal) )
												   (and (member (list i (1- j) 'T) final-moves :test #'equal)
												        (member (list i j 'L) final-moves :test #'equal) )
												   (and (member (list i (1+ j) 'T) final-moves :test #'equal)
												        (member (list i (1+ j) 'L) final-moves :test #'equal) )
												   (and (member (list (1- i) j 'L) final-moves :test #'equal)
												        (member (list i j 'L) final-moves :test #'equal) )
												   (and (member (list (1- i) (1+ j) 'L) final-moves :test #'equal)
												        (member (list i (1+ j) 'L) final-moves :test #'equal) ) ) t )
											  (t nil) )) )) ))
        ((equal e 'L) (cond ((equal i 0) (cond ((equal j 0) (cond ((and (member (list (1+ i) j 'T) final-moves :test #'equal)
                                                                        (member (list (1+ i) j 'L) final-moves :test #'equal) ) t )
																  (t nil) ))
											   (t (cond ((or (and (member (list (1+ i) (1- j) 'T) final-moves :test #'equal)
											                      (member (list (1+ i) j 'L) final-moves :test #'equal) )
															 (and (member (list (1+ i) j 'L) final-moves :test #'equal)
															      (member (list (1+ i) j 'T) final-moves :test #'equal) )
															 (and (member (list (1+ i) (1- j) 'T) final-moves :test #'equal)
															      (member (list (1+ i) j 'T) final-moves :test #'equal) )
															 (and (member (list i (1- j) 'T) final-moves :test #'equal)
															      (member (list i j 'T) final-moves :test #'equal) ) ) t )
														(t nil) )) ))
                            ((equal i (1- num-of-rows)) (cond ((equal j 0) (cond ((and (member (list i j 'T) final-moves :test #'equal)
                                                                                       (member (list (1- i) j 'L) final-moves :test #'equal) ) t )
																				 (t nil) ))
															  (t (cond ((or (and (member (list i (1- j) 'T) final-moves :test #'equal)
															                     (member (list (1- i) j 'L) final-moves :test #'equal) )
																			(and (member (list i j 'T) final-moves :test #'equal)
																			     (member (list (1- i) j 'L) final-moves :test #'equal) )
																			(and (member (list i (1- j) 'T) final-moves :test #'equal)
																			     (member (list i j 'T) final-moves :test #'equal) )
																			(and (member (list i (1- j) 'B) final-moves :test #'equal)
																			     (member (list i j 'B) final-moves :test #'equal) ) ) t )
																	   (t nil) )) ))
                            (t (cond ((equal j 0) (cond ((or (and (member (list i j 'T) final-moves :test #'equal)
                                                                  (member (list (1- i) j 'L) final-moves :test #'equal) )
                                                             (and (member (list (1+ i) j 'T) final-moves :test #'equal)
                                                                  (member (list (1+ i) j 'L) final-moves :test #'equal) ) ) t )
														(t nil) ))
                                     (t (cond ((or (and (member (list (1- i) j 'L) final-moves :test #'equal)
									                    (member (list i (1- j) 'T) final-moves :test #'equal) )
												   (and (member (list (1- i) j 'L) final-moves :test #'equal)
												        (member (list i j 'T) final-moves :test #'equal) )
												   (and (member (list i (1- j) 'T) final-moves :test #'equal)
												        (member (list i j 'T) final-moves :test #'equal) )
												   (and (member (list (1+ i) (1- j) 'T) final-moves :test #'equal)
												        (member (list (1+ i) j 'L) final-moves :test #'equal) )
												   (and (member (list (1+ i) j 'T) final-moves :test #'equal)
												        (member (list (1+ i) j 'L) final-moves :test #'equal) )
												   (and (member (list (1+ i) (1- j) 'T) final-moves :test #'equal)
												        (member (list (1+ i) j 'T) final-moves :test #'equal) ) ) t )
											  (t nil) )) )) ))
	    ((equal e 'R) (cond ((equal i 0) (cond ((and (member (list (1+ i) j 'R) final-moves :test #'equal)
		                                             (member (list i (1+ j) 'T) final-moves :test #'equal) ) t )
											   (t nil) ))
							(t (cond ((or (and (member (list (1- i) j 'R) final-moves :test #'equal)
							                   (member (list i j 'T) final-moves :test #'equal) )
										  (and (member (list (1+ i) j 'T) final-moves :test #'equal)
										       (member (list (1+ i) j 'R) final-moves :test #'equal) ) ) t )
									 (t nil) )) ))
		(t (cond ((equal j 0) (cond ((and (member (list i (1+ j) 'L) final-moves :test #'equal)
		                                  (member (list i (1+ j) 'B) final-moves :test #'equal) ) t )
									(t nil) ))
				 ((equal j (1- num-of-cols)) (cond ((or (and (member (list i (1- j) 'B) final-moves :test #'equal)
				                                             (member (list i j 'L) final-moves :test #'equal) )
														(and (member (list i (1+ j) 'L) final-moves :test #'equal)
														     (member (list i (1+ j) 'B) final-moves :test #'equal) ) ) t )
												   (t nil) )) )) ) )
        
                                        